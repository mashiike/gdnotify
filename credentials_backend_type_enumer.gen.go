// Code generated by "enumer -type=CredentialsBackendType -yaml -trimprefix CredentialsBackendType -output credentials_backend_type_enumer.gen.go"; DO NOT EDIT.

package gdnotify

import (
	"fmt"
	"strings"
)

const _CredentialsBackendTypeName = "NoneSSMParameterStore"

var _CredentialsBackendTypeIndex = [...]uint8{0, 4, 21}

const _CredentialsBackendTypeLowerName = "nonessmparameterstore"

func (i CredentialsBackendType) String() string {
	if i < 0 || i >= CredentialsBackendType(len(_CredentialsBackendTypeIndex)-1) {
		return fmt.Sprintf("CredentialsBackendType(%d)", i)
	}
	return _CredentialsBackendTypeName[_CredentialsBackendTypeIndex[i]:_CredentialsBackendTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _CredentialsBackendTypeNoOp() {
	var x [1]struct{}
	_ = x[CredentialsBackendTypeNone-(0)]
	_ = x[CredentialsBackendTypeSSMParameterStore-(1)]
}

var _CredentialsBackendTypeValues = []CredentialsBackendType{CredentialsBackendTypeNone, CredentialsBackendTypeSSMParameterStore}

var _CredentialsBackendTypeNameToValueMap = map[string]CredentialsBackendType{
	_CredentialsBackendTypeName[0:4]:       CredentialsBackendTypeNone,
	_CredentialsBackendTypeLowerName[0:4]:  CredentialsBackendTypeNone,
	_CredentialsBackendTypeName[4:21]:      CredentialsBackendTypeSSMParameterStore,
	_CredentialsBackendTypeLowerName[4:21]: CredentialsBackendTypeSSMParameterStore,
}

var _CredentialsBackendTypeNames = []string{
	_CredentialsBackendTypeName[0:4],
	_CredentialsBackendTypeName[4:21],
}

// CredentialsBackendTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CredentialsBackendTypeString(s string) (CredentialsBackendType, error) {
	if val, ok := _CredentialsBackendTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _CredentialsBackendTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CredentialsBackendType values", s)
}

// CredentialsBackendTypeValues returns all values of the enum
func CredentialsBackendTypeValues() []CredentialsBackendType {
	return _CredentialsBackendTypeValues
}

// CredentialsBackendTypeStrings returns a slice of all String values of the enum
func CredentialsBackendTypeStrings() []string {
	strs := make([]string, len(_CredentialsBackendTypeNames))
	copy(strs, _CredentialsBackendTypeNames)
	return strs
}

// IsACredentialsBackendType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i CredentialsBackendType) IsACredentialsBackendType() bool {
	for _, v := range _CredentialsBackendTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalYAML implements a YAML Marshaler for CredentialsBackendType
func (i CredentialsBackendType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for CredentialsBackendType
func (i *CredentialsBackendType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = CredentialsBackendTypeString(s)
	return err
}
